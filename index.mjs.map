{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isComplexLike from '@stdlib/assert-is-complex-like' ;\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport buffer from '@stdlib/ndarray-base-buffer' ;\nimport ndarray from '@stdlib/ndarray-ctor' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value.\n*\n* ## Notes\n*\n* -   If `dtype` is not provided and `value`\n*\n*     -   is a `number`, the default data type is `'float64'`.\n*     -   is a complex number object, the default data type is `'complex128'`.\n*     -   is any other value type, the default data type is `'generic'`.\n*\n* @param {*} value - scalar value\n* @param {string} [dtype] - output array data type\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*\n* @example\n* var x = scalar2ndarray( 1.0, 'float32' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float32'\n*\n* var v = x.get();\n* // returns 1.0\n*/\nfunction scalar2ndarray( value, dtype ) {\n\tvar buf;\n\tvar flg;\n\tvar dt;\n\tvar v;\n\tvar o;\n\n\tflg = isNumber( value );\n\tif ( arguments.length < 2 ) {\n\t\tif ( flg ) {\n\t\t\tdt = 'float64';\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = 'complex128';\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t}\n\t} else {\n\t\tdt = dtype;\n\t}\n\tbuf = buffer( dt, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( '0Ms3J', dt ) );\n\t}\n\tif ( /^complex/.test( dt ) && flg ) {\n\t\tv = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t} else {\n\t\tv = value;\n\t}\n\to = arraylike2object( buf );\n\to.setter( buf, 0, v );\n\treturn new ndarray( dt, buf, [], [ 0 ], 0, 'row-major' );\n}\n\n\n// EXPORTS //\n\nexport default scalar2ndarray;\n"],"names":["scalar2ndarray","value","dtype","buf","flg","dt","v","isNumber","arguments","length","isComplexLike","buffer","TypeError","format","test","arraylike2object","setter","ndarray"],"mappings":";;oiBA0EA,SAASA,EAAgBC,EAAOC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EAgBJ,GAbAF,EAAMG,EAAUN,GAGdI,EAFGG,UAAUC,OAAS,EAClBL,EACC,UACMM,EAAeT,GACrB,aAEA,UAGDC,EAGO,QADbC,EAAMQ,EAAQN,EAAI,IAEjB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IASvC,OANCC,EADI,WAAWQ,KAAMT,IAAQD,EACzB,CAAEH,EAAO,GAETA,EAEDc,EAAkBZ,GACpBa,OAAQb,EAAK,EAAGG,GACX,IAAIW,EAASZ,EAAIF,EAAK,GAAI,CAAE,GAAK,EAAG"}