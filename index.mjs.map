{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport dtype from '@stdlib/complex-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar ORDER = defaults.get( 'order' );\nvar DEFAULT_REAL = defaults.get( 'dtypes.real_floating_point' );\nvar DEFAULT_CMPLX = defaults.get( 'dtypes.complex_floating_point' );\nvar DEFAULT_BOOL = defaults.get( 'dtypes.boolean' );\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value.\n*\n* ## Notes\n*\n* -   If a `dtype` option is not provided and `value`\n*\n*     -   is a number, the default data type is the default real-valued floating-point data type.\n*     -   is a boolean, the default data type is the default boolean data type.\n*     -   is a complex number object of a known complex data type, the data type is the same as the provided value.\n*     -   is a complex number object of an unknown complex data type, the default data type is the default complex-valued floating-point data type.\n*     -   is any other value type, the default data type is `'generic'`.\n*\n* @param {*} value - scalar value\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order=\"row-major\"] - memory layout (either row-major or column-major)\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} second argument must be an object\n* @throws {TypeError} `dtype` option must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*\n* @example\n* var x = scalar2ndarray( 1.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float32'\n*\n* var v = x.get();\n* // returns 1.0\n*/\nfunction scalar2ndarray( value ) {\n\tvar options;\n\tvar opts;\n\tvar buf;\n\tvar flg;\n\tvar set;\n\tvar dt;\n\tvar v;\n\n\topts = {\n\t\t'dtype': '',\n\t\t'order': ORDER,\n\t\t'readonly': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0jv2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t}\n\tflg = isNumber( value );\n\tif ( opts.dtype === '' ) {\n\t\tif ( flg ) {\n\t\t\tdt = DEFAULT_REAL;\n\t\t} else if ( isBoolean( value ) ) {\n\t\t\tdt = DEFAULT_BOOL;\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = dtype( value );\n\t\t\tif ( dt === null ) {\n\t\t\t\tdt = DEFAULT_CMPLX;\n\t\t\t}\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t}\n\t} else {\n\t\tdt = opts.dtype;\n\t}\n\tbuf = buffer( dt, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( '0jvBf', 'dtype', dt ) );\n\t}\n\tif ( isComplexDataType( dt ) && flg ) {\n\t\tv = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t} else {\n\t\tv = value;\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( buf, 0, v );\n\treturn new ndarray( dt, buf, [], [ 0 ], 0, opts.order, opts );\n}\n\n\n// EXPORTS //\n\nexport default scalar2ndarray;\n"],"names":["ORDER","defaults","get","DEFAULT_REAL","DEFAULT_CMPLX","DEFAULT_BOOL","scalar2ndarray","value","options","opts","buf","flg","dt","v","dtype","order","readonly","arguments","length","isPlainObject","TypeError","format","hasOwnProp","isNumber","isBoolean","isComplexLike","buffer","isComplexDataType","isAccessorArray","accessorSetter","setter","ndarray"],"mappings":";;i3CAwCA,IAAIA,EAAQC,EAASC,IAAK,SACtBC,EAAeF,EAASC,IAAK,8BAC7BE,EAAgBH,EAASC,IAAK,iCAC9BG,EAAeJ,EAASC,IAAK,kBAuDjC,SAASI,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAOJ,GALAJ,EAAO,CACNK,MAAS,GACTC,MAASf,EACTgB,UAAY,GAERC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNX,EAAUS,UAAW,IAEpB,MAAM,IAAIG,UAAWC,EAAQ,QAASb,IAElCc,EAAYd,EAAS,WACzBC,EAAKK,MAAQN,EAAQM,OAEjBQ,EAAYd,EAAS,WACzBC,EAAKM,MAAQP,EAAQO,OAEjBO,EAAYd,EAAS,cACzBC,EAAKO,SAAWR,EAAQQ,SAEzB,CAmBD,GAlBAL,EAAMY,EAAUhB,GACI,KAAfE,EAAKK,MACJH,EACJC,EAAKT,EACMqB,EAAWjB,GACtBK,EAAKP,EACMoB,EAAelB,GAEd,QADZK,EAAKE,EAAOP,MAEXK,EAAKR,GAGNQ,EAAK,UAGNA,EAAKH,EAAKK,MAGE,QADbJ,EAAMgB,EAAQd,EAAI,IAEjB,MAAM,IAAIQ,UAAWC,EAAQ,QAAS,QAAST,IAahD,OAVCC,EADIc,EAAmBf,IAAQD,EAC3B,CAAEJ,EAAO,GAETA,GAEAqB,EAAiBlB,GACfmB,EAAgBjB,GAEhBkB,EAAQlB,IAEVF,EAAK,EAAGG,GACN,IAAIkB,EAASnB,EAAIF,EAAK,GAAI,CAAE,GAAK,EAAGD,EAAKM,MAAON,EACxD"}