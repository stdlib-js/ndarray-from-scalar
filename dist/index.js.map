{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value.\n*\n* ## Notes\n*\n* -   If a `dtype` option is not provided and `value`\n*\n*     -   is a `number`, the default data type is `'float64'`.\n*     -   is a complex number object, the default data type is `'complex128'`.\n*     -   is any other value type, the default data type is `'generic'`.\n*\n* @param {*} value - scalar value\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order=\"row-major\"] - memory layout (either row-major or column-major)\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} second argument must be an object\n* @throws {TypeError} `dtype` option must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*\n* @example\n* var x = scalar2ndarray( 1.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float32'\n*\n* var v = x.get();\n* // returns 1.0\n*/\nfunction scalar2ndarray( value ) {\n\tvar options;\n\tvar opts;\n\tvar buf;\n\tvar flg;\n\tvar set;\n\tvar dt;\n\tvar v;\n\n\topts = {\n\t\t'dtype': '',\n\t\t'order': ORDER,\n\t\t'readonly': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t}\n\tflg = isNumber( value );\n\tif ( opts.dtype === '' ) {\n\t\tif ( flg ) {\n\t\t\tdt = 'float64';\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = 'complex128';\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t}\n\t} else {\n\t\tdt = opts.dtype;\n\t}\n\tbuf = buffer( dt, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dt ) );\n\t}\n\tif ( /^complex/.test( dt ) && flg ) {\n\t\tv = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t} else {\n\t\tv = value;\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( buf, 0, v );\n\treturn new ndarray( dt, buf, [], [ 0 ], 0, opts.order, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scalar2ndarray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a scalar value to a zero-dimensional ndarray.\n*\n* @module @stdlib/ndarray-from-scalar\n*\n* @example\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n*\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*\n* @example\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n*\n* var x = scalar2ndarray( 1.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float32'\n*\n* var v = x.get();\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,iCAAkC,EACxDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAkB,QAAS,6CAA8C,EACzEC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAS,QAAS,2BAA4B,EAC9CC,EAAS,QAAS,6BAA8B,EAChDC,EAAU,QAAS,sBAAuB,EAC1CC,EAAW,QAAS,0BAA2B,EAC/CC,EAAS,QAAS,uBAAwB,EAK1CC,EAAQF,EAAS,IAAK,OAAQ,EAqDlC,SAASG,EAAgBC,EAAQ,CAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAOJ,GALAL,EAAO,CACN,MAAS,GACT,MAASJ,EACT,SAAY,EACb,EACK,UAAU,OAAS,EAAI,CAE3B,GADAG,EAAU,UAAW,CAAE,EAClB,CAACb,EAAea,CAAQ,EAC5B,MAAM,IAAI,UAAWJ,EAAQ,qEAAsEI,CAAQ,CAAE,EAEzGd,EAAYc,EAAS,OAAQ,IACjCC,EAAK,MAAQD,EAAQ,OAEjBd,EAAYc,EAAS,OAAQ,IACjCC,EAAK,MAAQD,EAAQ,OAEjBd,EAAYc,EAAS,UAAW,IACpCC,EAAK,SAAWD,EAAQ,SAE1B,CAcA,GAbAG,EAAMf,EAAUW,CAAM,EACjBE,EAAK,QAAU,GACdE,EACJE,EAAK,UACMhB,EAAeU,CAAM,EAChCM,EAAK,aAELA,EAAK,UAGNA,EAAKJ,EAAK,MAEXC,EAAMT,EAAQY,EAAI,CAAE,EACfH,IAAQ,KACZ,MAAM,IAAI,UAAWN,EAAQ,4EAA6E,QAASS,CAAG,CAAE,EAEzH,MAAK,WAAW,KAAMA,CAAG,GAAKF,EAC7BG,EAAI,CAAEP,EAAO,CAAI,EAEjBO,EAAIP,EAEAT,EAAiBY,CAAI,EACzBE,EAAMb,EAAgBc,CAAG,EAEzBD,EAAMZ,EAAQa,CAAG,EAElBD,EAAKF,EAAK,EAAGI,CAAE,EACR,IAAIZ,EAASW,EAAIH,EAAK,CAAC,EAAG,CAAE,CAAE,EAAG,EAAGD,EAAK,MAAOA,CAAK,CAC7D,CAKAhB,EAAO,QAAUa,IC5FjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "hasOwnProp", "isPlainObject", "isNumber", "isComplexLike", "isAccessorArray", "accessorSetter", "setter", "buffer", "ndarray", "defaults", "format", "ORDER", "scalar2ndarray", "value", "options", "opts", "buf", "flg", "set", "dt", "v", "main"]
}
